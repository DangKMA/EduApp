import {User} from './userType';
import {Course} from './courseType';

/**
 * Interface cho API Response - C·∫¨P NH·∫¨T ƒë·ªÉ ƒë·ªìng b·ªô v·ªõi backend structure
 * Bao g·ªìm timestamp field t·ª´ backend response
 */
export interface ApiResponse<T> {
  success: boolean;
  timestamp: string; // Th√™m timestamp field
  data?: T; // Thay ƒë·ªïi t·ª´ data: T th√†nh data?: T ƒë·ªÉ ph√π h·ª£p v·ªõi backend
  message: string; // Thay ƒë·ªïi t·ª´ optional th√†nh required
  count?: number; // Gi·ªØ nguy√™n optional
  error?: string; // Gi·ªØ nguy√™n optional
}

// Lo·∫°i th√¥ng b√°o
export type AnnouncementType =
  | 'announcement'
  | 'academic'
  | 'event'
  | 'urgent'
  | 'assignment';

// Lo·∫°i ng∆∞·ªùi nh·∫≠n
export type RecipientType =
  | 'all'
  | 'students'
  | 'teachers'
  | 'course'
  | 'custom';

// Role ng∆∞·ªùi nh·∫≠n
export type RecipientRole = 'all' | 'student' | 'teacher' | 'admin';

// Interface cho attachment
export interface AnnouncementAttachment {
  name: string;
  url: string;
  type: string;
  size?: number;
}

// Interface cho model Announcement t·ª´ backend
export interface Announcement {
  _id: string;
  title: string;
  content: string;
  type: AnnouncementType; // S·ª≠ d·ª•ng type alias thay v√¨ string
  sender: string | User;
  recipients?: string[] | User[];
  role?: RecipientRole;
  courseId?: string | Course;
  isImportant: boolean;
  isRead: boolean; // ƒê√¢y l√† tr∆∞·ªùng ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ph√≠a backend cho ng∆∞·ªùi d√πng hi·ªán t·∫°i
  dueDate?: string | Date | null;
  attachments?: AnnouncementAttachment[]; // Thay th·∫ø Array<{...}> b·∫±ng AnnouncementAttachment[]
  createdAt: string | Date;
  updatedAt: string | Date;
  expiresAt?: string | Date;
}

// Interface ƒë·ªÉ t·∫°o th√¥ng b√°o m·ªõi
export interface CreateAnnouncementParams {
  title: string;
  content: string;
  type?: AnnouncementType; // ƒê·∫£m b·∫£o s·ª≠ d·ª•ng AnnouncementType
  recipientType: RecipientType;
  courseId?: string;
  recipients?: string[];
  isImportant?: boolean;
  dueDate?: string | Date;
  attachments?: AnnouncementAttachment[]; // S·ª≠ d·ª•ng AnnouncementAttachment
}

// Interface ƒë·ªÉ t·∫°o th√¥ng b√°o kh√≥a h·ªçc
export interface CreateCourseAnnouncementParams {
  title: string;
  content: string;
  type?: AnnouncementType; // ƒê·∫£m b·∫£o s·ª≠ d·ª•ng AnnouncementType
  courseId: string;
  isImportant?: boolean;
  dueDate?: string | Date;
  attachments?: AnnouncementAttachment[]; // S·ª≠ d·ª•ng AnnouncementAttachment
}

// Interface ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng b√°o
export interface UpdateAnnouncementParams {
  title?: string;
  content?: string;
  type?: AnnouncementType; // ƒê√¢y l√† ch·ªó ƒëang g√¢y l·ªói, ƒë·∫£m b·∫£o s·ª≠ d·ª•ng AnnouncementType
  isImportant?: boolean;
  dueDate?: string | Date | null;
  attachments?: AnnouncementAttachment[]; // S·ª≠ d·ª•ng AnnouncementAttachment
}

// Interface cho filter params khi l·∫•y danh s√°ch th√¥ng b√°o
export interface AnnouncementFilterParams {
  page?: number;
  limit?: number;
  search?: string;
  type?: AnnouncementType | string; // Cho ph√©p string ho·∫∑c AnnouncementType
  unread?: boolean;
  startDate?: string; // Th√™m c√°c tr∆∞·ªùng filter c·∫ßn thi·∫øt
  endDate?: string;
  courseId?: string;
}

// Interface cho ph√¢n trang
export interface PaginationInfo {
  total: number;
  page: number;
  pages: number;
  limit: number;
}

// C·∫¨P NH·∫¨T: Interface cho response khi l·∫•y danh s√°ch th√¥ng b√°o
export interface AnnouncementListResponse extends ApiResponse<Announcement[]> {
  total?: number;
  page?: number;
  pages?: number;
  unreadCount?: number;
}

// C·∫¨P NH·∫¨T: Interface cho response khi l·∫•y chi ti·∫øt m·ªôt th√¥ng b√°o
export interface AnnouncementResponse extends ApiResponse<Announcement> {}

// C·∫¨P NH·∫¨T: Interface cho response khi t·∫°o th√¥ng b√°o m·ªõi
export interface CreateAnnouncementResponse extends ApiResponse<Announcement> {}

// C·∫¨P NH·∫¨T: Interface cho response khi c·∫≠p nh·∫≠t th√¥ng b√°o
export interface UpdateAnnouncementResponse extends ApiResponse<Announcement> {}

// C·∫¨P NH·∫¨T: Interface cho response khi ƒë√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
export interface MarkAsReadResponse
  extends ApiResponse<{
    unreadCount: number;
    announcementId: string;
  }> {}

// C·∫¨P NH·∫¨T: Interface cho response khi x√≥a th√¥ng b√°o
export interface DeleteAnnouncementResponse extends ApiResponse<null> {}

// C·∫¨P NH·∫¨T: Interface cho response khi l·∫•y th√¥ng b√°o ch∆∞a ƒë·ªçc
export interface UnreadAnnouncementsResponse
  extends ApiResponse<{
    announcements: Announcement[];
    unreadCount: number;
  }> {}

// C·∫¨P NH·∫¨T: Interface cho response khi l·∫•y th√¥ng b√°o theo kh√≥a h·ªçc
export interface CourseAnnouncementsResponse
  extends ApiResponse<Announcement[]> {
  course?: {
    _id: string;
    name: string;
    code?: string;
  };
  total?: number;
  page?: number;
  pages?: number;
}

// C·∫¨P NH·∫¨T: Interface cho response khi ƒë√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc
export interface MarkAllAsReadResponse
  extends ApiResponse<{
    updatedCount: number;
    unreadCount: number;
  }> {}

// C·∫¨P NH·∫¨T: Interface cho response upload attachment
export interface UploadAttachmentResponse
  extends ApiResponse<AnnouncementAttachment> {}

// C·∫¨P NH·∫¨T: Interface cho response bulk delete
export interface BulkDeleteAnnouncementsResponse
  extends ApiResponse<{
    deletedCount: number;
    deletedIds: string[];
  }> {}

// C·∫¨P NH·∫¨T: Interface cho error response
export interface AnnouncementErrorResponse {
  success: false;
  timestamp: string; // Th√™m timestamp field
  message: string; // Thay ƒë·ªïi t·ª´ optional th√†nh required
  error?: string;
  statusCode?: number;
}

// Union type cho t·∫•t c·∫£ response c√≥ th·ªÉ nh·∫≠n ƒë∆∞·ª£c
export type AnnouncementApiResponse<T> =
  | ApiResponse<T>
  | AnnouncementErrorResponse;

// Type guards
export const isAnnouncementErrorResponse = (
  response: any,
): response is AnnouncementErrorResponse => {
  return response.success === false && typeof response.message === 'string';
};

export const isApiResponse = <T>(response: any): response is ApiResponse<T> => {
  return (
    typeof response === 'object' &&
    typeof response.success === 'boolean' &&
    typeof response.timestamp === 'string' &&
    typeof response.message === 'string'
  );
};

export const isValidAnnouncementType = (
  type: string,
): type is AnnouncementType => {
  return ['announcement', 'academic', 'event', 'urgent', 'assignment'].includes(
    type,
  );
};

export const isValidRecipientType = (type: string): type is RecipientType => {
  return ['all', 'students', 'teachers', 'course', 'custom'].includes(type);
};

// Helper functions
export const getAnnouncementTypeColor = (type: AnnouncementType): string => {
  const colorMap: Record<AnnouncementType, string> = {
    announcement: '#2196F3',
    academic: '#4CAF50',
    event: '#FF9800',
    urgent: '#F44336',
    assignment: '#9C27B0',
  };
  return colorMap[type] || '#757575';
};

export const getAnnouncementTypeIcon = (type: AnnouncementType): string => {
  const iconMap: Record<AnnouncementType, string> = {
    announcement: 'üì¢',
    academic: 'üìö',
    event: 'üìÖ',
    urgent: 'üö®',
    assignment: 'üìù',
  };
  return iconMap[type] || 'üì¨';
};

export const getAnnouncementTypeLabel = (type: AnnouncementType): string => {
  const labelMap: Record<AnnouncementType, string> = {
    announcement: 'Th√¥ng b√°o',
    academic: 'H·ªçc t·∫≠p',
    event: 'S·ª± ki·ªán',
    urgent: 'Kh·∫©n c·∫•p',
    assignment: 'B√†i t·∫≠p',
  };
  return labelMap[type] || 'Kh√¥ng x√°c ƒë·ªãnh';
};

export const formatAnnouncementDate = (date: string | Date): string => {
  const announcementDate = new Date(date);
  const now = new Date();
  const diffInMs = now.getTime() - announcementDate.getTime();
  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));
  const diffInDays = Math.floor(diffInHours / 24);

  if (diffInHours < 1) return 'V·ª´a xong';
  if (diffInHours < 24) return `${diffInHours} gi·ªù tr∆∞·ªõc`;
  if (diffInDays < 7) return `${diffInDays} ng√†y tr∆∞·ªõc`;

  return announcementDate.toLocaleDateString('vi-VN');
};

export const isAnnouncementExpired = (announcement: Announcement): boolean => {
  if (!announcement.expiresAt) return false;
  const expiryDate = new Date(announcement.expiresAt);
  const now = new Date();
  return now > expiryDate;
};

export const isAnnouncementDueSoon = (
  announcement: Announcement,
  hoursThreshold: number = 24,
): boolean => {
  if (!announcement.dueDate) return false;
  const dueDate = new Date(announcement.dueDate);
  const now = new Date();
  const diffInMs = dueDate.getTime() - now.getTime();
  const diffInHours = diffInMs / (1000 * 60 * 60);
  return diffInHours > 0 && diffInHours <= hoursThreshold;
};

// Constants
export const ANNOUNCEMENT_TYPES = {
  ANNOUNCEMENT: 'announcement' as const,
  ACADEMIC: 'academic' as const,
  EVENT: 'event' as const,
  URGENT: 'urgent' as const,
  ASSIGNMENT: 'assignment' as const,
} as const;

export const RECIPIENT_TYPES = {
  ALL: 'all' as const,
  STUDENTS: 'students' as const,
  TEACHERS: 'teachers' as const,
  COURSE: 'course' as const,
  CUSTOM: 'custom' as const,
} as const;

export const RECIPIENT_ROLES = {
  ALL: 'all' as const,
  STUDENT: 'student' as const,
  TEACHER: 'teacher' as const,
  ADMIN: 'admin' as const,
} as const;
